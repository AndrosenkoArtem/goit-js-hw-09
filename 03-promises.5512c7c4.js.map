{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAGA,MAAMC,EAAOC,SAASC,cAAc,SAEpC,IAAIC,GAAW,EA6EfH,EAAKI,iBAAiB,UA5DtB,SAAsBC,GACpBA,EAAEC,iBACF,MAAMC,EAAkBF,EAAEG,cAAcC,SAASC,MAAMC,MACjDC,EAAiBP,EAAEG,cAAcC,SAASI,KAAKF,MAC/CG,EAAmBT,EAAEG,cAAcC,SAASM,OAAOJ,MACzD,IAAIK,EAAkB,EAClBC,EAAeC,OAAOX,GAC1B,GAAIJ,EACF,OAEFA,GAAW,EAEX,MAAMgB,EAAwBC,aAAY,KACxCJ,GAAmB,EAkBvB,UAAoCG,sBAClCA,EAAqBH,gBACrBA,EAAeF,iBACfA,IAEA,GAAIE,GAAmBF,EACrBO,cAAcF,GACdhB,GAAW,EACXa,EAAkB,C,CAzBlBM,CAA2B,C,sBACzBH,E,gBACAH,E,iBACAF,IAhCN,SAAuBS,EAAUb,GAC/B,MAAMc,EAAgBC,KAAKC,SAAW,GAYtC,OAXgB,IAAIC,SAAQ,CAACC,EAASC,KACpCC,YAAW,KACLN,EAEFI,EAAQL,GAGRM,EAAON,EAAS,GAEjBb,EAAM,G,CAwBTqB,CAAcf,EAAiBT,GAC5ByB,MAAKT,IACJN,GAAgBC,OAAON,GAsB/B,UAA+BK,aAAEA,EAAYL,eAAEA,EAAcW,SAAEA,IAC7DU,EAAAnC,GAASoC,OAAOC,QACd,uBAAqBZ,QAAiBN,EACxBC,OAAGN,O,CAxBbwB,CAAsB,C,aAAEnB,E,eAAcL,E,SAAgBW,GAAW,IAElEc,OAAMd,IACLN,GAAgBC,OAAON,GAyB/B,UAA6BK,aAAEA,EAAYL,eAAEA,EAAcW,SAAEA,IAE3DU,EAAAnC,GAASoC,OAAOI,QACd,sBAAoBf,QAAiBN,EACvBC,OAAGN,O,CA5Bb2B,CAAoB,C,aAAEtB,E,eAAcL,E,SAAgBW,GAAW,GAC/D,GACHX,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport 'notiflix/dist/notiflix-3.2.6.min.css';\n\nconst form = document.querySelector('.form');\n\nlet isActive = false;\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve(position);\n      } else {\n        // Reject\n        reject(position);\n      }\n    }, delay);\n  });\n  return promise;\n}\nfunction onSubmitForm(e) {\n  e.preventDefault();\n  const deleyInputValue = e.currentTarget.elements.delay.value;\n  const stepInputValue = e.currentTarget.elements.step.value;\n  const amountInputValue = e.currentTarget.elements.amount.value;\n  let currentPosition = 0;\n  let currentDelay = Number(deleyInputValue);\n  if (isActive) {\n    return;\n  }\n  isActive = true;\n\n  const promiseResultInterval = setInterval(() => {\n    currentPosition += 1;\n    ifPromiseIntervalCompleted({\n      promiseResultInterval,\n      currentPosition,\n      amountInputValue,\n    });\n\n    createPromise(currentPosition, deleyInputValue)\n      .then(position => {\n        currentDelay += Number(stepInputValue);\n        createPrimiseSuccsess({ currentDelay, stepInputValue, position });\n      })\n      .catch(position => {\n        currentDelay += Number(stepInputValue);\n        createPromiseFailed({ currentDelay, stepInputValue, position });\n      });\n  }, stepInputValue);\n}\nfunction ifPromiseIntervalCompleted({\n  promiseResultInterval,\n  currentPosition,\n  amountInputValue,\n}) {\n  if (currentPosition >= amountInputValue) {\n    clearInterval(promiseResultInterval);\n    isActive = false;\n    currentPosition = 0;\n\n    return;\n  }\n}\nfunction createPrimiseSuccsess({ currentDelay, stepInputValue, position }) {\n  Notiflix.Notify.success(\n    `✅ Fulfilled promise ${position} in ${\n      currentDelay - Number(stepInputValue)\n    }ms`\n  );\n}\nfunction createPromiseFailed({ currentDelay, stepInputValue, position }) {\n  // currentDelay += Number(stepInputValue);\n  Notiflix.Notify.failure(\n    `❌ Rejected promise ${position} in ${\n      currentDelay - Number(stepInputValue)\n    }ms`\n  );\n}\n\nform.addEventListener('submit', onSubmitForm);\n//\n// function onSubmitForm(e) {\n//   e.preventDefault();\n//   let currentDelay = Number(refs.delay[0].value);\n\n//   if (isActive) {\n//     return;\n//   }\n//   isActive = true;\n//   promiseResultInterval = setInterval(() => {\n//     currentPosition += 1;\n//     if (currentPosition > Number(refs.amount[0].value)) {\n//       clearInterval(promiseResultInterval);\n//       isActive = false;\n//       currentPosition = 0;\n\n//       return;\n//     }\n\n//     createPromise(currentPosition, refs.delay[0].value)\n//       .then(({ position, delay }) => {\n//         currentDelay += Number(refs.step[0].value);\n//         Notiflix.Notify.success(\n//           `✅ Fulfilled promise ${position} in ${\n//             currentDelay - Number(refs.step[0].value)\n//           }ms`\n//         );\n//       })\n//       .catch(({ position, delay }) => {\n//         currentDelay += Number(refs.step[0].value);\n//         Notiflix.Notify.failure(\n//           `❌ Rejected promise ${position} in ${\n//             currentDelay - Number(refs.step[0].value)\n//           }ms`\n//         );\n//       });\n//   }, refs.step[0].value);\n// }\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$isActive","addEventListener","e","preventDefault","deleyInputValue","currentTarget","elements","delay","value","stepInputValue","step","amountInputValue","amount","currentPosition","currentDelay","Number","promiseResultInterval","setInterval","clearInterval","$47d4ff9957288465$var$ifPromiseIntervalCompleted","position","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","$47d4ff9957288465$var$createPromise","then","$parcel$interopDefault","Notify","success","$47d4ff9957288465$var$createPrimiseSuccsess","catch","failure","$47d4ff9957288465$var$createPromiseFailed"],"version":3,"file":"03-promises.5512c7c4.js.map"}